var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Links-and-messages","page":"Usage","title":"Links and messages","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"We communicate with actors and actors can communicate with each other (and with themselves) over links and messages.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Link\nLinkParams\nparallel\nMessage\nStop","category":"page"},{"location":"usage/#YAActL.Link","page":"Usage","title":"YAActL.Link","text":"Link\n\nIs a Channel{Message} type for communicating with actors.\n\nwarn: Warn\nIn actor systems you always use buffered message links to avoid blocking. If an actor must respond on an unbuffered or full channel it blocks unduely. Link() creates an unbuffered Channel. Use Link(32) or newLink() instead.\n\n\n\n\n\n","category":"type"},{"location":"usage/#YAActL.LinkParams","page":"Usage","title":"YAActL.LinkParams","text":"LinkParams(size=32; taskref=nothing, spawn=false)\n\nSet the parameters for setting up an Actor. See also: Channel.\n\nParameters\n\nsize::Int: channel buffer size, must be size ≥ 10,\ntaskref::Union{Nothing, Ref{Task}}: If you need a reference to the created task,   pass a Ref{Task} object via the keyword argument taskref.\nspawn::Bool: If spawn = true, the Task created may be scheduled on another   thread in parallel, equivalent to creating a task via Threads.@spawn.\n\n\n\n\n\n","category":"type"},{"location":"usage/#YAActL.parallel","page":"Usage","title":"YAActL.parallel","text":"parallel(size=32; taskref=nothing)\n\nReturn LinkParams with spawn=true.\n\n\n\n\n\n","category":"function"},{"location":"usage/#YAActL.Message","page":"Usage","title":"YAActL.Message","text":"Abstract type for messages to actors.\n\n\n\n\n\n","category":"type"},{"location":"usage/#YAActL.Stop","page":"Usage","title":"YAActL.Stop","text":"message Stop() causes an actor to stop.\n\n\n\n\n\n","category":"type"},{"location":"usage/","page":"Usage","title":"Usage","text":"To setup an actor system we have to specify the messages. For example:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using YAActL, Printf\n\nstruct Pop <: Message\n    customer::Link\nend\n\nstruct Push{T} <: Message\n    content::T\nend\n\nstruct Response{T} <: Message\n    content::T\nend","category":"page"},{"location":"usage/#Actors-and-their-behaviors","page":"Usage","title":"Actors and their behaviors","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Actors are Julia tasks executing functions as behaviors. If a message arrives, the actor loop passes the message to the behavior function as the last argument. In Julia we want the behavior functions to dispatch on messages. In the following example we define two behaviors forward! and stack_node. There are two methods for stack_node, dispatching on Push and Pop. With become actors can change their behavior. Actors can generate other actors.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"forward!(lk::L, msg::M) where {L<:Link, M<:Message} = send!(lk, msg)\n\nfunction stack_node(sn::StackNode, msg::Pop)\n    isnothing(sn.content) || become(forward!, sn.link)\n    send!(msg.customer, Response(sn.content))\nend\n\nfunction stack_node(sn::StackNode, msg::Push)\n    P = Actor(stack_node, sn)\n    become(stack_node, StackNode(msg.content, P))\nend","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With Actor we can setup actors, with send! we can send them messages, with become! we can cause them to change their behaviors.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"mystack = Actor(lk, stack_node, StackNode(nothing, Link()))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"note: Note\nIf we setup an actor we don't pass the last message argument of the behavior function to Actor.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Actor\nbecome\nself\nsend!\nbecome!","category":"page"},{"location":"usage/#YAActL.Actor","page":"Usage","title":"YAActL.Actor","text":"Actor([lp::LinkParams], bhv::Function, args...; kwargs...)\n\nCreate a new actor. Start a task executing repeatedly the behavior bhv. The actor listens to messages msg sent over the returned link and executes bhv(args..., msg, kwargs) for each message. The actor stops if sent Stop().\n\nArguments\n\n[lp::LinkParams]: optional parameters for creating the actor,\nbhv::Function: function implementing the actor's behavior,\nargs...: arguments to bhv, (without msg)\nkwargs...: keyword arguments to bhv.\n\nreturn a Link to the created actor, a Channel{Message} object.\n\n\n\n\n\n","category":"function"},{"location":"usage/#YAActL.become","page":"Usage","title":"YAActL.become","text":"become(bhv::Function, args...; kwargs...)\n\nCause yourself to take on a new behavior. Called from inside an actor/behavior.\n\nArguments\n\nbhv::Function: function implementing the new behavior,\nargs...: arguments to bhv (without msg),\nkwargs...: keyword arguments to bhv.\n\n\n\n\n\n","category":"function"},{"location":"usage/#YAActL.self","page":"Usage","title":"YAActL.self","text":"self()\n\nGet a Link to yourself from inside an actor.\n\n\n\n\n\n","category":"function"},{"location":"usage/#YAActL.send!","page":"Usage","title":"YAActL.send!","text":"send!(lk::Link, m::Message)\n\nSend a message m to an actor over a link lk.\n\n\n\n\n\n","category":"function"},{"location":"usage/#YAActL.become!","page":"Usage","title":"YAActL.become!","text":"become!(lk::Link, bhv::Function, args...; kwargs...)\n\nCause another actor to assume a new behavior.\n\nArguments\n\nlk::Link: Link to an actor,\nbhv::Function: function implementing the new behavior,\nargs...: arguments to bhv (without msg),\nkwargs...: keyword arguments to bhv.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Internal","page":"Usage","title":"Internal","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"YAActL.Become","category":"page"},{"location":"usage/#YAActL.Become","page":"Usage","title":"YAActL.Become","text":"internal message Become(f::Function, args...; kwargs...) for behavior change.\n\n\n\n\n\n","category":"type"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#A-Stack","page":"Examples","title":"A Stack","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This is Agha's example 3.2.1. It implements a stack as a collection of actors with two operations/messages Push and Pop. A StackNode stores a content and a Link to the next Actor in the chain.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The top of the stack is the only receptionist in the stack system and was the only actor of the stack system created externally. It is created with a NIL content which is assumed to be the bottom of the stack marker. Notice that no mail address of a stack node is ever communicated by any node to an external actor. Therefore no actor outside the configuration defined above can affect any of the actors inside the stack except by sending the receptionist a communication. When a pop operation is done, the actor on top of the stack simply becomes a forwarder to the next actor in the link. This means that all communications received by the top of the stack are now forwarded to the next element.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now the core lines in our implementation are essentially the same as in Agha's example:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using YAActL\n\nmutable struct StackNode{T}\n    content::T\n    link::Link\nend\n\n# define the messages\nstruct Pop <: Message\n    customer::Link\nend\n\nstruct Push{T} <: Message\n    content::T\nend\n\nstruct Response{T} <: Message\n    content::T\nend\n\n# define the forwarder behavior\nforward!(lk::L, msg::M) where {L<:Link, M<:Message} = send!(lk, msg)\n\n# ----- this is essentially Agha's code example written in Julia/YAActL\nfunction stack_node(sn::StackNode, msg::Pop)\n    isnothing(sn.content) || become(forward!, sn.link)\n    send!(msg.customer, Response(sn.content))\nend\n\nfunction stack_node(sn::StackNode, msg::Push)\n    P = Actor(stack_node, sn)\n    become(stack_node, StackNode(msg.content, P))\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now we can create the top of the stack (the receptionist). All other actors of the system are created internally if we send a Push message. We interact only with the top of the stack:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> mystack = Actor(lk, stack_node, StackNode(nothing, Link()))\nChannel{Message}(sz_max:32,sz_curr:0)\n\njulia> response = newLink()           # create a response link\nChannel{Message}(sz_max:32,sz_curr:0)\n\njulia> send!(mystack, Pop(response))  # new stack\n\njulia> take!(response)                # returns nothing\nResponse{Nothing}(nothing)\n\njulia> send!(mystack, Push(1))        # push 1 on the stack\n\njulia> send!(mystack, Pop(response))  # pop it\n\njulia> take!(response)                # returns 1, 1st node now forwards messages\nResponse{Int64}(1)\n\njulia> send!(mystack, Pop(response))  # pop again\n\njulia> take!(response)                # now returns nothing\nResponse{Nothing}(nothing)\n\njulia> for i ∈ 1:5\n           send!(mystack, Push(i))\n       end\n\njulia> for i ∈ 1:5\n           send!(mystack, Pop(response))\n           println(take!(response))\n       end\nResponse{Int64}(5)\nResponse{Int64}(4)\nResponse{Int64}(3)\nResponse{Int64}(2)\nResponse{Int64}(1)","category":"page"},{"location":"#YAActL","page":"YAActL","title":"YAActL","text":"","category":"section"},{"location":"","page":"YAActL","title":"YAActL","text":"YAActL is in early development. I could not find a suitable actor library for implementing reactive state machines in DiscreteEvents and StateMachines. So I am writing my own. Likewise it helps me to learn the actor concept.","category":"page"},{"location":"","page":"YAActL","title":"YAActL","text":"YAActL uses native Julia tasks and channels to implement actors.","category":"page"},{"location":"#Installation","page":"YAActL","title":"Installation","text":"","category":"section"},{"location":"","page":"YAActL","title":"YAActL","text":"] add \"https://github.com/pbayer/YAActL.jl\"","category":"page"},{"location":"#Quick-Intro","page":"YAActL","title":"Quick Intro","text":"","category":"section"},{"location":"","page":"YAActL","title":"YAActL","text":"An Actor reads a Message from a Link and passes it to a function implementing his behavior. He can change his behavior with become. Basically we have to define the messages and to implement the behaviors.","category":"page"},{"location":"","page":"YAActL","title":"YAActL","text":"using YAActL, Printf\n\nstruct Print <: Message        # define a message\n    txt::String\nend\n\n# define two behaviors accepting a msg::Message as their last argument\nfunction pr(msg::Print)\n    print(@sprintf(\"%s\\n\", msg.txt))\n    become(pr, \"Next\") # change behaviour\nend\npr(info, msg::Print) = print(@sprintf(\"%s: %s\\n\", info, msg.txt))\n\n# start an actor with the first behaviour and save the returned link\nmyactor = Actor(pr)","category":"page"},{"location":"","page":"YAActL","title":"YAActL","text":"We can interact with the actor over the returned link.","category":"page"},{"location":"","page":"YAActL","title":"YAActL","text":"julia> send!(myactor, Print(\"My first actor\"));  # send a message to it\nMy first actor\n\njulia> send!(myactor, Print(\"Something else\"));  # send again a message\nNext: Something else\n\njulia> become!(myactor, pr, \"New behavior\");     # cause the actor to change the behavior to another one\n\njulia> send!(myactor, Print(\"bla bla bla\"));     # and send again a message\nNew behavior: bla bla bla","category":"page"},{"location":"#References","page":"YAActL","title":"References","text":"","category":"section"},{"location":"","page":"YAActL","title":"YAActL","text":"Gul Agha: Actors, A Model of Concurrent Computation in Distributed Systems.- 1986, MIT Press\nVaughn Vernon: Reactive Messaging Patterns with the Actor Model, Applications and Integrations in Scala and Akka.- 2016, Pearson","category":"page"}]
}
